import { useState, useEffect } from "react";
import { ImageWithFallback } from "./components/figma/ImageWithFallback";
import { Button } from "./components/ui/button";
import { Card } from "./components/ui/card";
import { Input } from "./components/ui/input";
import { Label } from "./components/ui/label";
import { Separator } from "./components/ui/separator";
import { Badge } from "./components/ui/badge";
import { Skeleton } from "./components/ui/skeleton";
import { Alert, AlertDescription } from "./components/ui/alert";
import { Switch } from "./components/ui/switch";
import {
  Trash2,
  Plus,
  Send,
  Minus,
  Check,
  Monitor,
  Zap,
  ZapOff,
  Lightbulb,
  Loader2,
  AlertCircle,
  ShoppingCart,
  Download,
  ChevronUp,
  RotateCw,
  RotateCcw,
} from "lucide-react";

// Import Directus service layer
import {
  getActiveAccessories,
  getActiveColorTemperatures,
  getActiveDrivers,
  getActiveFrameColors,
  getActiveFrameThicknesses,
  getActiveLightDirections,
  getActiveLightOutputs,
  getActiveMirrorControls,
  getActiveMirrorStyles,
  getProductLineBySku,
  getActiveSizes,
  getNumericDimensions,
  getActiveMountingOptions,
  getDecoProductByName,
  getActiveDecoProducts,
  initializeDirectusService,
  getActiveProductLines,
  getProductLineWithOptions,
  getFilteredOptionsForProductLine,
  getAllConfigurationImages,
  ProductLine,
  ConfigurationImage
} from "./services/directus";

// Import components
import { ProductLineSelector } from "./components/ui/product-line-selector";
import { CurrentConfiguration } from "./components/ui/current-configuration";
import { ProductImageLayers } from "./components/ProductImageLayers";

interface ProductConfig {
  id: string;
  productLineId: number;
  productLineName: string;
  mirrorControls: string;
  frameColor: string;
  frameThickness: string;
  mirrorStyle: string;
  width: string;
  height: string;
  mounting: string;
  lighting: string;
  colorTemperature: string;
  lightOutput: string;
  driver: string;
  accessories: string[];
  quantity: number;
}

interface ProductOption {
  id: number;
  name: string;
  sku_code: string;
  description?: string;
  hex_code?: string;
  width?: number;
  height?: number;
  value?: string;
}

interface ProductOptions {
  mirrorControls: ProductOption[];
  frameColors: ProductOption[];
  frameThickness: ProductOption[];
  mirrorStyles: ProductOption[];
  mountingOptions: ProductOption[];
  lightingOptions: ProductOption[];
  colorTemperatures: ProductOption[];
  lightOutputs: ProductOption[];
  drivers: ProductOption[];
  accessoryOptions: ProductOption[];
  sizes: ProductOption[];
}

// Icon mapping for different option types
const iconMapping: { [key: string]: any } = {
  direct: Zap,
  indirect: Lightbulb,
  "both direct and indirect": Zap,
  zap: Zap,
  "zap-off": ZapOff,
  lightbulb: Lightbulb,
  monitor: Monitor,
  portrait: RotateCcw,
  landscape: RotateCw,
};

export default function App() {
  // App state
  const [productOptions, setProductOptions] = useState<ProductOptions | null>(null);
  const [currentProductImage, setCurrentProductImage] = useState<string | null>(null);
  const [currentProductLine, setCurrentProductLine] = useState<ProductLine | null>(null);
  const [availableProductLines, setAvailableProductLines] = useState<ProductLine[]>([]);
  const [configurationImages, setConfigurationImages] = useState<ConfigurationImage[]>([]);

  // Loading states
  const [isLoadingApp, setIsLoadingApp] = useState(true);
  const [isLoadingProductLine, setIsLoadingProductLine] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [currentConfig, setCurrentConfig] = useState<ProductConfig | null>(null);
  const [quoteItems, setQuoteItems] = useState<ProductConfig[]>([]);
  const [customerInfo, setCustomerInfo] = useState({
    name: "",
    email: "",
    company: "",
    phone: "",
  });

  const [showQuoteForm, setShowQuoteForm] = useState(false);

  // Custom size toggle state
  const [useCustomSize, setUseCustomSize] = useState(false);

  // Floating configuration bar state
  const [showFloatingBar, setShowFloatingBar] = useState(false);

  // Initialize app on component mount
  useEffect(() => {
    initializeApp();
  }, []);

  // Configuration images are now handled by ProductImageLayers component
  // No need to update product image manually

  // Floating bar scroll detection
  useEffect(() => {
    const handleScroll = () => {
      if (currentConfig) {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const showBar = scrollTop > 400;
        setShowFloatingBar(showBar);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [currentConfig]);

  const initializeApp = async () => {
    try {
      setIsLoadingApp(true);
      setError(null);

      console.log('Loading real product data...');

      // Initialize Directus service first
      await initializeDirectusService();

      // Load all product lines
      const productLines = await getActiveProductLines();
      setAvailableProductLines(productLines);

      // Load configuration images for dynamic image rendering
      const configImages = await getAllConfigurationImages();
      setConfigurationImages(configImages);
      console.log(`✓ Loaded ${configImages.length} configuration images`);

      // Get Deco product line with options as default
      const decoProductLine = await getProductLineWithOptions('D');
      if (!decoProductLine) {
        throw new Error('Deco product line not found');
      }

      setCurrentProductLine(decoProductLine);

      // Load filtered options for the default product line
      await loadProductLineOptions(decoProductLine);

    } catch (err) {
      console.error("Failed to load product data:", err);
      setError(err instanceof Error ? err.message : "Failed to load product data");
    } finally {
      setIsLoadingApp(false);
    }
  };

  // Load options for a specific product line
  const loadProductLineOptions = async (productLine: ProductLine) => {
    try {
      console.log(`🔄 Loading options for ${productLine.name}...`);

      // Get filtered options for this product line
      const filteredOptions = await getFilteredOptionsForProductLine(productLine);

      const options: ProductOptions = {
        mirrorControls: filteredOptions.mirrorControls.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          description: item.description
        })),
        frameColors: filteredOptions.frameColors.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          hex_code: item.hex_code
        })),
        frameThickness: filteredOptions.frameThickness.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code
        })),
        mirrorStyles: filteredOptions.mirrorStyles.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          description: item.description
        })),
        mountingOptions: filteredOptions.mountingOptions.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          description: item.description
        })),
        lightingOptions: filteredOptions.lightingOptions.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          description: item.description
        })),
        colorTemperatures: filteredOptions.colorTemperatures.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code
        })),
        lightOutputs: filteredOptions.lightOutputs.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code
        })),
        drivers: filteredOptions.drivers.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          description: item.description
        })),
        // Use filtered accessories (already filtered by product line)
        accessoryOptions: filteredOptions.accessories.map(item => ({
          id: item.id,
          name: item.name,
          sku_code: item.sku_code,
          description: item.description || undefined
        })),
        sizes: filteredOptions.sizes.map(item => {
          const dimensions = getNumericDimensions(item);
          return {
            id: item.id,
            name: item.name,
            sku_code: item.sku_code,
            width: dimensions.width,
            height: dimensions.height
          };
        }),
      };

      setProductOptions(options);

      // Initialize current configuration with first available options and default size
      const defaultSize = options.sizes[0]; // First size preset

      // Only set configuration if we have at least some options available
      if (options.mirrorControls.length > 0 || options.frameColors.length > 0 || options.sizes.length > 0) {
        setCurrentConfig({
          id: `config-${Date.now()}`,
          productLineId: productLine.id,
          productLineName: productLine.name,
          mirrorControls: options.mirrorControls[0]?.id.toString() || "",
          frameColor: options.frameColors[0]?.id.toString() || "",
          frameThickness: options.frameThickness[0]?.id.toString() || "",
          mirrorStyle: options.mirrorStyles[0]?.id.toString() || "",
          width: defaultSize?.width?.toString() || "24",
          height: defaultSize?.height?.toString() || "36",
          mounting: options.mountingOptions[0]?.id.toString() || "",
          lighting: options.lightingOptions[0]?.id.toString() || "",
          colorTemperature: options.colorTemperatures[0]?.id.toString() || "",
          lightOutput: options.lightOutputs[0]?.id.toString() || "",
          driver: options.drivers[0]?.id.toString() || "",
          accessories: [],
          quantity: 1,
        });
      } else {
        console.log(`⚠️ No options available for ${productLine.name}, configuration not initialized`);
        setCurrentConfig(null);
      }

      console.log("✓ Real product data loaded successfully");
      console.log(`✓ Loaded ${options.mirrorControls.length} mirror controls`);
      console.log(`✓ Loaded ${options.frameColors.length} frame colors`);
      console.log(`✓ Loaded ${options.mirrorStyles.length} mirror styles`);
      console.log(`✓ Loaded ${options.sizes.length} size options`);
      console.log(`✓ Loaded ${options.mountingOptions.length} mounting orientations`);
      console.log(`✓ Loaded ${options.accessoryOptions.length} filtered accessories (Nightlight & Anti-Fog only)`);
      
      // Get deco products count for logging
      const decoProducts = await getActiveDecoProducts();
      console.log(`✓ Loaded ${decoProducts.length} Deco products for image matching`);
      
    } catch (error) {
      console.error(`❌ Error loading options for ${productLine.name}:`, error);
      throw error;
    }
  };

  // Handle product line change
  const handleProductLineChange = async (newProductLine: ProductLine) => {
    if (newProductLine.sku_code === currentProductLine?.sku_code) {
      return; // No change needed
    }

    try {
      setIsLoadingProductLine(true);
      console.log(`🔄 Switching to product line: ${newProductLine.name}`);

      // Get product line with expanded default options
      const productLineWithOptions = await getProductLineWithOptions(newProductLine.sku_code);
      if (!productLineWithOptions) {
        throw new Error(`Failed to load product line ${newProductLine.name}`);
      }

      setCurrentProductLine(productLineWithOptions);

      // Load filtered options for the new product line
      await loadProductLineOptions(productLineWithOptions);

      console.log(`✅ Successfully switched to ${newProductLine.name}`);
    } catch (error) {
      console.error(`❌ Error switching product line:`, error);
      setError(error instanceof Error ? error.message : "Failed to switch product line");
    } finally {
      setIsLoadingProductLine(false);
    }
  };

  // Function to generate product name based on current configuration
  const generateProductName = () => {
    try {
      if (!currentConfig || !productOptions) return null;

      // Get option names based on current config
      const frameThicknessOption = productOptions.frameThickness.find(
        (option) => option.id.toString() === currentConfig.frameThickness
      );
      const mountingOption = productOptions.mountingOptions.find(
        (option) => option.id.toString() === currentConfig.mounting
      );
      const lightingOption = productOptions.lightingOptions.find(
        (option) => option.id.toString() === currentConfig.lighting
      );
      const mirrorStyleOption = productOptions.mirrorStyles.find(
        (option) => option.id.toString() === currentConfig.mirrorStyle
      );

      // Format the product name
      let productName = `${currentConfig.productLineName}`;

      if (frameThicknessOption) {
        productName += ` ${frameThicknessOption.name}`;
      }

      if (mountingOption) {
        productName += ` ${mountingOption.name}`;
      }

      if (lightingOption) {
        productName += ` with ${lightingOption.name} lighting`;
      }

      if (mirrorStyleOption && mirrorStyleOption.name.toLowerCase() !== "none") {
        productName += `, ${mirrorStyleOption.name}`;
      }

      if (currentConfig.width && currentConfig.height) {
        productName += ` (${currentConfig.width}" × ${currentConfig.height}")`;
      }

      return productName;
    } catch (err) {
      console.error("Error generating product name:", err);
      return null;
    }

  // Function to fetch SVG content from Directus via proxy
  const fetchSvg = async (fileId: string): Promise<string> => {
    try {
      console.log(`Fetching SVG with file ID: ${fileId}`);
      // Use the proxy path to avoid CORS issues
      const response = await fetch(`/api/assets/${fileId}`);
      
      console.log(`SVG fetch response status: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch SVG: ${response.statusText}`);
      }
      
      const svgContent = await response.text();
      console.log(`SVG content length: ${svgContent.length} chars`);
      console.log(`SVG content preview: ${svgContent.substring(0, 100)}...`);
      
      return svgContent;
    } catch (error) {
      console.error(`Error fetching SVG ${fileId}:`, error);
      return '';
    }
  };

  // SVG layers are now handled by ProductImageLayers component
  // No need for legacy updateProductImage function

  const handleConfigChange = (field: keyof ProductConfig, value: any) => {
    if (!currentConfig) return;

    console.log(`🔧 Config change: ${field} = ${value}`);
    
    setCurrentConfig((prev) =>
      prev
        ? {
            ...prev,
            [field]: value,
          }
        : null,
    );
  };

  const handleSizePresetSelect = (size: ProductOption) => {
    if (!currentConfig || !size.width || !size.height) return;

    setCurrentConfig((prev) =>
      prev
        ? {
            ...prev,
            width: size.width!.toString(),
            height: size.height!.toString(),
          }
        : null,
    );
  };

  const getCurrentSizeId = () => {
    if (!currentConfig || !productOptions) return null;

    const currentSize = productOptions.sizes.find(
      (size) =>
        size.width?.toString() === currentConfig.width &&
        size.height?.toString() === currentConfig.height,
    );

    return currentSize?.sku_code || null;
  };

  const handleAccessoryToggle = (accessoryId: string) => {
    if (!currentConfig) return;

    setCurrentConfig((prev) =>
      prev
        ? {
            ...prev,
            accessories: prev.accessories.includes(accessoryId)
              ? prev.accessories.filter((id) => id !== accessoryId)
              : [...prev.accessories, accessoryId],
          }
        : null,
    );
  };

  const incrementQuantity = () => {
    if (!currentConfig) return;
    setCurrentConfig((prev) =>
      prev
        ? {
            ...prev,
            quantity: Math.min(prev.quantity + 1, 100),
          }
        : null,
    );
  };

  const decrementQuantity = () => {
    if (!currentConfig) return;
    setCurrentConfig((prev) =>
      prev
        ? {
            ...prev,
            quantity: Math.max(prev.quantity - 1, 1),
          }
        : null,
    );
  };

  const addToQuote = () => {
    if (!currentConfig || !productOptions || !currentProductLine) return;

    setQuoteItems((prev) => [
      ...prev,
      {
        ...currentConfig,
        id: `config-${Date.now()}`,
      },
    ]);

    // Reset current configuration with default options and size
    const defaultSize = productOptions.sizes[0];
    setCurrentConfig({
      id: `config-${Date.now()}`,
      productLineId: currentProductLine.id,
      productLineName: currentProductLine.name,
      mirrorControls: productOptions.mirrorControls[0]?.id.toString() || "",
      frameColor: productOptions.frameColors[0]?.id.toString() || "",
      frameThickness: productOptions.frameThickness[0]?.id.toString() || "",
      mirrorStyle: productOptions.mirrorStyles[0]?.id.toString() || "",
      width: defaultSize?.width?.toString() || "24",
      height: defaultSize?.height?.toString() || "36",
      mounting: productOptions.mountingOptions[0]?.id.toString() || "",
      lighting: productOptions.lightingOptions[0]?.id.toString() || "",
      colorTemperature: productOptions.colorTemperatures[0]?.id.toString() || "",
      lightOutput: productOptions.lightOutputs[0]?.id.toString() || "",
      driver: productOptions.drivers[0]?.id.toString() || "",
      accessories: [],
      quantity: 1,
    });

    // Reset custom size toggle
    setUseCustomSize(false);
  };

  const removeFromQuote = (configId: string) => {
    setQuoteItems((prev) => prev.filter((item) => item.id !== configId));
  };

  const downloadConfiguration = () => {
    if (!productOptions || !currentProductLine) return;

    const configData = {
      exportDate: new Date().toISOString(),
      productLine: currentProductLine.name,
      quoteItems: quoteItems.map((item) => ({
        ...item,
        description: getConfigDescription(item),
      })),
      summary: {
        totalItems: quoteItems.length,
        totalQuantity: quoteItems.reduce((sum, item) => sum + item.quantity, 0),
      },
    };

    const dataStr = JSON.stringify(configData, null, 2);
    const dataBlob = new Blob([dataStr], { type: "application/json" });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `deco-mirror-configuration-${new Date().toISOString().split("T")[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const submitQuote = () => {
    console.log("Quote submitted:", {
      configs: quoteItems,
      customerInfo,
      productLine: currentProductLine?.name,
    });
    alert("Quote request submitted successfully!");
    setQuoteItems([]);
    setCustomerInfo({
      name: "",
      email: "",
      company: "",
      phone: "",
    });
    setShowQuoteForm(false);
  };

  const getConfigDescription = (config: ProductConfig) => {
    if (!productOptions) return "";

    const frameColorName = productOptions.frameColors.find(
      (c) => c.id.toString() === config.frameColor
    )?.name || config.frameColor;
    
    const mirrorStyleName = productOptions.mirrorStyles.find(
      (m) => m.id.toString() === config.mirrorStyle
    )?.name || config.mirrorStyle;

    return `${config.width}" × ${config.height}" ${frameColorName}, ${mirrorStyleName}`;
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Loading state for initial app load
  if (isLoadingApp || !productOptions || !currentProductLine) {
    return (
      <div className="min-h-screen bg-white">
        <nav className="border-b border-gray-200 bg-white">
          <div className="max-w-7xl mx-auto px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="text-2xl font-bold tracking-tight">
                Product Configurator
              </div>
              <div className="flex items-center space-x-4">
                <Skeleton className="h-10 w-32" />
              </div>
            </div>
          </div>
        </nav>

        <div className="max-w-7xl mx-auto px-6 py-16">
          <div className="text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto mb-6 text-gray-400" />
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              Loading Product Configurator
            </h2>
            <p className="text-gray-600">
              Preparing your custom mirror configuration experience...
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Main configurator view
  return (
    <div className="min-h-screen bg-white">
      {/* Navigation */}
      <nav className="border-b border-gray-200 bg-white sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="text-2xl font-bold tracking-tight">
                Product Configurator
              </div>
              <div className="ml-6">
                <ProductLineSelector
                  productLines={availableProductLines}
                  selectedProductLine={currentProductLine}
                  onProductLineChange={handleProductLineChange}
                  isLoading={isLoadingProductLine}
                />
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <Button
                onClick={() => setShowQuoteForm(true)}
                disabled={quoteItems.length === 0}
                className={`${
                  quoteItems.length === 0
                    ? "bg-gray-300 text-gray-500 cursor-not-allowed hover:bg-gray-300"
                    : "bg-amber-500 hover:bg-amber-600 text-white"
                }`}
              >
                <ShoppingCart className="w-4 h-4 mr-2" />
                Request Quote <span className="text-gray-700">({quoteItems.length})</span>
              </Button>
            </div>
          </div>
        </div>
      </nav>

      {/* Error Alert */}
      {error && (
        <div className="max-w-7xl mx-auto px-6 pt-6">
          <Alert className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </div>
      )}

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 mt-[0px] mr-[0px] mb-[80px] ml-[0px]">
          {/* Product Visualization - Sticky on Desktop */}
          <div className="space-y-8 lg:sticky lg:top-24 lg:self-start lg:max-h-[calc(100vh-8rem)] lg:overflow-y-auto">
            <div className="aspect-[4/3] bg-gray-50 rounded-lg overflow-hidden">
              {currentConfig && configurationImages.length > 0 ? (
                <ProductImageLayers
                  config={currentConfig}
                  configurationImages={configurationImages}
                  fetchSvg={fetchSvg}
                />
              ) : currentProductImage ? (
                <ImageWithFallback
                  src={currentProductImage}
                  alt={`${currentProductLine.name} Mirror - ${generateProductName() || 'Configuration'}`}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-gray-400 bg-gradient-to-br from-gray-50 to-gray-100">
                  <Monitor className="w-20 h-20" />
                </div>
              )}
            </div>

            {/* Current Product Info */}
            {generateProductName() && (
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="text-center">
                  <p className="text-sm text-gray-600 mb-1">Current Product</p>
                  <p className="font-medium text-gray-900">{generateProductName()}</p>
                  {currentProductImage && currentProductImage.includes('pim.dude.digital') && (
                    <p className="text-xs text-green-600 mt-1">✓ Real product image loaded</p>
                  )}
                  {currentProductImage && currentProductImage.includes('unsplash') && (
                    <p className="text-xs text-orange-600 mt-1">⚠ Using fallback image</p>
                  )}
                </div>
              </div>
            )}

            {/* Quote Summary */}
            {quoteItems.length > 0 && (
              <div className="bg-gray-50 rounded-lg p-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">
                  Current Quote ({quoteItems.length} items)
                </h4>
                <div className="space-y-3">
                  {quoteItems.map((item) => (
                    <div
                      key={item.id}
                      className="flex items-center justify-between p-4 bg-white rounded border"
                    >
                      <div className="flex-1">
                        <p className="font-medium text-gray-900">
                          {getConfigDescription(item)}
                        </p>
                        <div className="flex items-center space-x-4 text-sm text-gray-500 mt-1">
                          <span>Qty: {item.quantity}</span>
                          {item.accessories.length > 0 && (
                            <span>+{item.accessories.length} accessories</span>
                          )}
                        </div>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeFromQuote(item.id)}
                        className="text-red-600 hover:text-red-700 hover:bg-red-50 ml-4"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                </div>

                {/* Action buttons */}
                <div className="flex justify-end space-x-3 mt-4 pt-4 border-t border-gray-200">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={downloadConfiguration}
                    className="flex items-center space-x-2"
                  >
                    <Download className="w-4 h-4" />
                    <span>Download Config</span>
                  </Button>
                  <Button
                    size="sm"
                    onClick={() => setShowQuoteForm(true)}
                    className="bg-amber-500 hover:bg-amber-600 text-white flex items-center space-x-2"
                  >
                    <Send className="w-4 h-4" />
                    <span>Request Quote</span>
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Product Information & Configuration */}
          <div className="space-y-12">
            {/* Product Header */}
            <div className="space-y-6">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2">
                  {currentProductLine.name} Mirror Collection
                </h1>
                <p className="text-lg text-gray-600 leading-relaxed">
                  Premium illuminated mirrors with customizable lighting, controls, and finishes.
                  Configure your perfect mirror with professional-grade options and accessories.
                </p>
              </div>

              {/* No Configuration Available Message */}
              {!currentConfig && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                  <div className="flex items-center space-x-3">
                    <AlertCircle className="w-6 h-6 text-yellow-600" />
                    <div>
                      <h3 className="text-lg font-semibold text-yellow-800">
                        No Configuration Options Available
                      </h3>
                      <p className="text-yellow-700 mt-1">
                        The selected product line "{currentProductLine.name}" does not have any configuration options defined.
                        Please select a different product line or contact support to configure options for this product line.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Current Configuration Summary */}
              {currentConfig && productOptions && (
                <CurrentConfiguration
                  config={currentConfig}
                  productOptions={productOptions}
                  onQuantityChange={(quantity) => handleConfigChange("quantity", quantity)}
                  onAddToQuote={addToQuote}
                />
              )}
            </div>

            {/* Configuration Options - REORDERED ACCORDING TO SPECIFICATION */}
            {currentConfig && (
            <div className="space-y-10">
              {/* 1. Mirror Controls */}
              {productOptions.mirrorControls.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Mirror Controls</h3>
                <div className="space-y-3">
                  {productOptions.mirrorControls.map((control) => (
                    <button
                      key={control.id}
                      onClick={() => handleConfigChange("mirrorControls", control.id.toString())}
                      className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.mirrorControls === control.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 mb-1">{control.name}</div>
                          <div className="text-sm text-gray-600">{control.description}</div>
                        </div>
                        <Badge variant="outline">{control.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}

              {/* 2. Frame Color */}
              {productOptions.frameColors.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Frame Color</h3>
                <div className="grid grid-cols-2 gap-4">
                  {productOptions.frameColors.map((color) => (
                    <button
                      key={color.id}
                      onClick={() => handleConfigChange("frameColor", color.id.toString())}
                      className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.frameColor === color.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <div
                          className="w-6 h-6 rounded-full border border-gray-300 flex-shrink-0"
                          style={{
                            backgroundColor: color.hex_code || "#000000",
                            borderColor: color.hex_code === "#FFFFFF" ? "#e5e5e5" : color.hex_code || "#000000",
                          }}
                        />
                        <div className="flex-1">
                          <div className="font-medium text-gray-900">{color.name}</div>
                          <div className="text-sm text-gray-600">{color.sku_code}</div>
                        </div>
                        <Badge variant="outline">{color.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}

              {/* 3. Frame Thickness */}
              {productOptions.frameThickness.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Frame Thickness</h3>
                <div className="space-y-3">
                  {productOptions.frameThickness.map((thickness) => (
                    <button
                      key={thickness.id}
                      onClick={() => handleConfigChange("frameThickness", thickness.id.toString())}
                      className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.frameThickness === thickness.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 mb-1">{thickness.name}</div>
                          {thickness.description && (
                            <div className="text-sm text-gray-600">{thickness.description}</div>
                          )}
                        </div>
                        <Badge variant="outline">{thickness.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}

              {/* 4. Mirror Style */}
              {productOptions.mirrorStyles.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Mirror Style</h3>
                <div className="space-y-3">
                  {productOptions.mirrorStyles.map((style) => (
                    <button
                      key={style.id}
                      onClick={() => handleConfigChange("mirrorStyle", style.id.toString())}
                      className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.mirrorStyle === style.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 mb-1">{style.name}</div>
                          <div className="text-sm text-gray-600">{style.description}</div>
                        </div>
                        <Badge variant="outline">{style.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}

              {/* 5. Light Direction */}
              {productOptions.lightingOptions.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Light Direction</h3>
                <div className="space-y-3">
                  {productOptions.lightingOptions.map((option) => {
                    const Icon = iconMapping[option.name.toLowerCase()] || Zap;
                    return (
                      <button
                        key={option.id}
                        onClick={() => handleConfigChange("lighting", option.id.toString())}
                        className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                          currentConfig.lighting === option.id.toString()
                            ? "border-amber-500 bg-amber-50"
                            : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <Icon className="w-5 h-5 text-gray-600 flex-shrink-0" />
                          <div className="flex-1">
                            <div className="font-medium text-gray-900 mb-1">{option.name}</div>
                            <div className="text-sm text-gray-600">{option.description}</div>
                          </div>
                          <Badge variant="outline">{option.sku_code}</Badge>
                        </div>
                      </button>
                    );
                  })}
                </div>
              </div>
              )}

              {/* 6. Orientation (Mounting Options) */}
              {productOptions.mountingOptions.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Orientation</h3>
                <div className="space-y-3">
                  {productOptions.mountingOptions.map((option) => {
                    const Icon = iconMapping[option.name.toLowerCase()] || RotateCcw;
                    return (
                      <button
                        key={option.id}
                        onClick={() => handleConfigChange("mounting", option.id.toString())}
                        className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                          currentConfig.mounting === option.id.toString()
                            ? "border-amber-500 bg-amber-50"
                            : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <Icon className="w-5 h-5 text-gray-600 flex-shrink-0" />
                          <div className="flex-1">
                            <div className="font-medium text-gray-900 mb-1">{option.name}</div>
                            <div className="text-sm text-gray-600">{option.description}</div>
                          </div>
                          <Badge variant="outline">{option.sku_code}</Badge>
                        </div>
                      </button>
                    );
                  })}
                </div>
              </div>
              )}

              {/* 7. Size */}
              {(productOptions.sizes.length > 0 || useCustomSize) && (
              <div>
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-semibold text-gray-900">Size</h3>
                  <div className="flex items-center space-x-3">
                    <Label htmlFor="custom-size-toggle" className="text-sm text-gray-700">
                      Custom Size
                    </Label>
                    <Switch
                      id="custom-size-toggle"
                      checked={useCustomSize}
                      onCheckedChange={setUseCustomSize}
                    />
                  </div>
                </div>

                {useCustomSize ? (
                  // Custom size inputs
                  <div className="grid grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label className="text-gray-700">Width (inches)</Label>
                      <div className="relative">
                        <Input
                          type="number"
                          value={currentConfig.width}
                          onChange={(e) => handleConfigChange("width", e.target.value)}
                          min="12"
                          max="120"
                          className="text-center text-lg font-medium h-12 bg-gray-50 border-gray-200"
                        />
                        <div className="absolute right-3 top-1/2 -translate-y-1/2 text-sm text-gray-500">
                          in
                        </div>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label className="text-gray-700">Height (inches)</Label>
                      <div className="relative">
                        <Input
                          type="number"
                          value={currentConfig.height}
                          onChange={(e) => handleConfigChange("height", e.target.value)}
                          min="12"
                          max="120"
                          className="text-center text-lg font-medium h-12 bg-gray-50 border-gray-200"
                        />
                        <div className="absolute right-3 top-1/2 -translate-y-1/2 text-sm text-gray-500">
                          in
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  // Default size presets
                  <div className="grid grid-cols-2 gap-4">
                    {productOptions.sizes.map((size) => (
                      <button
                        key={size.id}
                        onClick={() => handleSizePresetSelect(size)}
                        className={`p-4 rounded-lg border-2 transition-all duration-200 text-left relative ${
                          getCurrentSizeId() === size.sku_code
                            ? "border-amber-500 bg-amber-50"
                            : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-medium text-gray-900 mb-1">{size.name}</div>
                            <div className="text-sm text-gray-600">{size.width}" × {size.height}"</div>
                          </div>
                          <Badge variant="outline">{size.sku_code}</Badge>
                        </div>
                        {getCurrentSizeId() === size.sku_code && (
                          <div className="absolute top-3 right-3">
                            <div className="w-5 h-5 bg-amber-500 rounded-full flex items-center justify-center">
                              <Check className="w-3 h-3 text-white" />
                            </div>
                          </div>
                        )}
                      </button>
                    ))}
                  </div>
                )}
              </div>
              )}

              {/* 8. Accessories */}
              {productOptions.accessoryOptions.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Accessories</h3>
                <div className="space-y-3">
                  {productOptions.accessoryOptions.map((accessory) => {
                      const isSelected = currentConfig.accessories.includes(accessory.id.toString());
                      return (
                        <button
                          key={accessory.id}
                          onClick={() => handleAccessoryToggle(accessory.id.toString())}
                          className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                            isSelected
                              ? "border-amber-500 bg-amber-50"
                              : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                          }`}
                        >
                          <div className="flex items-center space-x-3">
                            <div className="flex-1">
                              <div className="font-medium text-gray-900 mb-1">{accessory.name}</div>
                              <div className="text-sm text-gray-600">{accessory.description || `SKU: ${accessory.sku_code}`}</div>
                            </div>
                            <Badge variant="outline" className="mr-3">{accessory.sku_code}</Badge>
                            <div
                              className={`w-5 h-5 rounded-full flex items-center justify-center transition-colors ${
                                isSelected
                                  ? "bg-amber-500 text-white"
                                  : "border-2 border-gray-300"
                              }`}
                            >
                              {isSelected && <Check className="w-3 h-3" />}
                            </div>
                          </div>
                        </button>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* 9. Color Temperature */}
              {productOptions.colorTemperatures.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Color Temperature</h3>
                <div className="space-y-3">
                  {productOptions.colorTemperatures.map((temp) => (
                    <button
                      key={temp.id}
                      onClick={() => handleConfigChange("colorTemperature", temp.id.toString())}
                      className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.colorTemperature === temp.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 mb-1">{temp.name}</div>
                          {temp.description && (
                            <div className="text-sm text-gray-600">{temp.description}</div>
                          )}
                        </div>
                        <Badge variant="outline">{temp.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}

              {/* 10. Light Output */}
              {productOptions.lightOutputs.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Light Output</h3>
                <div className="space-y-3">
                  {productOptions.lightOutputs.map((output) => (
                    <button
                      key={output.id}
                      onClick={() => handleConfigChange("lightOutput", output.id.toString())}
                      className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.lightOutput === output.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 mb-1">{output.name}</div>
                          {output.description && (
                            <div className="text-sm text-gray-600">{output.description}</div>
                          )}
                        </div>
                        <Badge variant="outline">{output.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}

              {/* 11. Driver Options */}
              {productOptions.drivers.length > 0 && (
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-6">Driver Options</h3>
                <div className="space-y-3">
                  {productOptions.drivers.map((driver) => (
                    <button
                      key={driver.id}
                      onClick={() => handleConfigChange("driver", driver.id.toString())}
                      className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        currentConfig.driver === driver.id.toString()
                          ? "border-amber-500 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 mb-1">{driver.name}</div>
                          <div className="text-sm text-gray-600">{driver.description}</div>
                        </div>
                        <Badge variant="outline">{driver.sku_code}</Badge>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              )}


            </div>
            )}
          </div>
        </div>
      </div>

      {/* Floating Configuration Bar */}
      {showFloatingBar && currentConfig && (
        <div
          className={`fixed bottom-0 left-0 right-0 z-50 transform transition-all duration-500 ease-out ${
            showFloatingBar ? "translate-y-0 opacity-100" : "translate-y-full opacity-0"
          }`}
        >
          <div className="bg-white/95 backdrop-blur-sm border-t border-gray-200 shadow-2xl">
            <div className="max-w-7xl mx-auto px-6 py-4">
              <div className="flex items-center justify-between">
                {/* Left side - Configuration summary */}
                <div className="flex items-center space-x-6">
                  <button
                    onClick={scrollToTop}
                    className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
                  >
                    <ChevronUp className="w-4 h-4" />
                    <span className="text-sm font-medium">View Details</span>
                  </button>

                  <div className="hidden sm:flex items-center space-x-4 text-sm">
                    <span className="font-medium text-gray-900">
                      {currentConfig.width}" × {currentConfig.height}"
                    </span>
                    <span className="text-gray-600">
                      {productOptions.frameColors.find(
                        (c) => c.id.toString() === currentConfig.frameColor
                      )?.name}
                    </span>
                    <span className="text-gray-600">
                      {productOptions.lightingOptions.find(
                        (l) => l.id.toString() === currentConfig.lighting
                      )?.name}
                    </span>
                  </div>
                </div>

                {/* Right side - Quantity and Add to Quote */}
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={decrementQuantity}
                      disabled={currentConfig.quantity <= 1}
                      className="h-8 w-8 p-0"
                    >
                      <Minus className="w-3 h-3" />
                    </Button>
                    <span className="text-sm font-medium min-w-[3rem] text-center">
                      Qty: {currentConfig.quantity}
                    </span>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={incrementQuantity}
                      disabled={currentConfig.quantity >= 100}
                      className="h-8 w-8 p-0"
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>

                  <Button
                    onClick={addToQuote}
                    className="bg-amber-500 hover:bg-amber-600 text-white px-6 py-2 h-10"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add to Quote
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Quote Request Modal */}
      {showQuoteForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-3xl max-h-[90vh] overflow-y-auto bg-white">
            <div className="p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Request Quote</h2>

              {quoteItems.length === 0 ? (
                <div className="text-center py-12">
                  <p className="text-gray-600 mb-6">
                    No items in quote. Please add some configurations first.
                  </p>
                  <Button onClick={() => setShowQuoteForm(false)} variant="outline">
                    Close
                  </Button>
                </div>
              ) : (
                <>
                  {/* Quote Summary */}
                  <div className="mb-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Quote Summary</h3>
                    <div className="space-y-3">
                      {quoteItems.map((item, index) => (
                        <div
                          key={item.id}
                          className="flex justify-between items-center p-4 bg-gray-50 rounded-lg"
                        >
                          <div>
                            <span className="font-medium text-gray-900">
                              {getConfigDescription(item)}
                            </span>
                            <span className="text-gray-600 ml-2">(x{item.quantity})</span>
                          </div>
                          <Badge variant="secondary">Item {index + 1}</Badge>
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator className="my-8" />

                  {/* Customer Information */}
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold text-gray-900">Contact Information</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-2">
                        <Label htmlFor="customerName" className="text-gray-700">
                          Name *
                        </Label>
                        <Input
                          id="customerName"
                          value={customerInfo.name}
                          onChange={(e) =>
                            setCustomerInfo((prev) => ({
                              ...prev,
                              name: e.target.value,
                            }))
                          }
                          className="bg-gray-50 border-gray-200"
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="customerEmail" className="text-gray-700">
                          Email *
                        </Label>
                        <Input
                          id="customerEmail"
                          type="email"
                          value={customerInfo.email}
                          onChange={(e) =>
                            setCustomerInfo((prev) => ({
                              ...prev,
                              email: e.target.value,
                            }))
                          }
                          className="bg-gray-50 border-gray-200"
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="customerCompany" className="text-gray-700">
                          Company
                        </Label>
                        <Input
                          id="customerCompany"
                          value={customerInfo.company}
                          onChange={(e) =>
                            setCustomerInfo((prev) => ({
                              ...prev,
                              company: e.target.value,
                            }))
                          }
                          className="bg-gray-50 border-gray-200"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="customerPhone" className="text-gray-700">
                          Phone
                        </Label>
                        <Input
                          id="customerPhone"
                          value={customerInfo.phone}
                          onChange={(e) =>
                            setCustomerInfo((prev) => ({
                              ...prev,
                              phone: e.target.value,
                            }))
                          }
                          className="bg-gray-50 border-gray-200"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-end space-x-4 mt-8">
                    <Button variant="outline" onClick={() => setShowQuoteForm(false)}>
                      Cancel
                    </Button>
                    <Button
                      onClick={submitQuote}
                      disabled={!customerInfo.name || !customerInfo.email}
                      className="bg-amber-500 hover:bg-amber-600 text-white"
                    >
                      <Send className="w-4 h-4 mr-2" />
                      Submit Quote Request
                    </Button>
                  </div>
                </>
              )}
            </div>
          </Card>
        </div>
      )}
    </div>
  );
}


}
